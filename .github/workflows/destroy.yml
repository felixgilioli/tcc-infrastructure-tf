name: Delete EKS Cluster

on:
  push:
    branches:
      - destroy
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: tcc-eks-cluster

jobs:
  cleanup-kubernetes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region us-east-1

      - name: Delete Kubernetes Resources
        run: |
          echo "🗑️ Deletando recursos do Kubernetes..."
          
          # 1. Deletar HPAs (para evitar recriação de pods)
          echo "Deletando HPAs..."
          kubectl delete hpa --all --all-namespaces --ignore-not-found=true --timeout=2m || true
          
          # 2. Deletar Deployments, StatefulSets e DaemonSets
          echo "Deletando Deployments..."
          kubectl delete deployments --all --all-namespaces --ignore-not-found=true --timeout=5m || true
          
          echo "Deletando StatefulSets..."
          kubectl delete statefulsets --all --all-namespaces --ignore-not-found=true --timeout=5m || true
          
          echo "Deletando DaemonSets..."
          kubectl delete daemonsets --all --all-namespaces --ignore-not-found=true --timeout=3m || true
          
          # 3. Deletar Services (LoadBalancers precisam ser deletados para liberar ELBs na AWS)
          echo "Deletando Services..."
          kubectl delete services --all --all-namespaces --ignore-not-found=true --timeout=5m || true
          
          # 4. Deletar PVCs (para liberar EBS volumes)
          echo "Deletando PVCs..."
          kubectl delete pvc --all --all-namespaces --ignore-not-found=true --timeout=5m || true
          
          # 5. Deletar outros recursos comuns
          echo "Deletando Ingresses..."
          kubectl delete ingress --all --all-namespaces --ignore-not-found=true --timeout=3m || true
          
          echo "Deletando ConfigMaps e Secrets (exceto kube-system)..."
          kubectl delete configmaps --all --all-namespaces --ignore-not-found=true --field-selector metadata.namespace!=kube-system --timeout=2m || true
          kubectl delete secrets --all --all-namespaces --ignore-not-found=true --field-selector metadata.namespace!=kube-system --timeout=2m || true
          
          echo "✅ Recursos do Kubernetes deletados com sucesso!"
        continue-on-error: true

      - name: Wait for AWS Resources Cleanup
        run: |
          echo "⏳ Aguardando 60 segundos para garantir que recursos AWS foram liberados..."
          sleep 60

  terraform-destroy:
    runs-on: ubuntu-latest
    needs: [cleanup-kubernetes]

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: terraform init
        working-directory: ./src

      - name: Terraform Destroy
        run: terraform destroy --auto-approve
        working-directory: ./src

      - name: Cleanup Summary
        run: |
          echo "### 🎉 Cluster EKS Deletado com Sucesso!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Recursos do Kubernetes limpos" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cluster EKS **${{ env.CLUSTER_NAME }}** destruído" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Infraestrutura removida via Terraform" >> $GITHUB_STEP_SUMMARY