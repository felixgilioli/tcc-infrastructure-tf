name: IaC Pipeline - EKS Destroy

on:
  push:
    branches:
      - destroy
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./src

      # ========== DESCOBRIR VPC_ID ==========

      - name: 🔍 Descobrir VPC_ID do Terraform State
        id: get_vpc
        run: |
          echo "Buscando VPC_ID do Terraform State..."
          
          # Listar recursos VPC
          echo "Listando recursos do state:"
          terraform state list
          
          # Encontrar o recurso VPC
          VPC_RESOURCE=$(terraform state list | grep -E 'aws_vpc\.' | head -1)
          
          if [ -z "$VPC_RESOURCE" ]; then
            echo "❌ ERRO: Nenhum recurso aws_vpc encontrado no state"
            echo "Recursos disponíveis:"
            terraform state list
            exit 1
          fi
          
          echo "Recurso VPC encontrado: $VPC_RESOURCE"
          
          # Extrair VPC_ID do recurso
          VPC_ID=$(terraform state show "$VPC_RESOURCE" 2>/dev/null | grep -E '^\s*id\s*=' | head -1 | sed 's/.*=\s*"\(.*\)"/\1/' | tr -d ' ')
          
          # Validar se é um VPC ID válido (formato: vpc-XXXXXXXXXXXXXXXXX)
          if [[ ! "$VPC_ID" =~ ^vpc-[a-f0-9]{17}$ ]] && [[ ! "$VPC_ID" =~ ^vpc-[a-f0-9]{8}$ ]]; then
            echo "❌ ERRO: VPC_ID inválido capturado: '$VPC_ID'"
            echo "Tentando método alternativo..."
          
            # Método alternativo: extrair JSON e pegar o id
            VPC_ID=$(terraform show -json 2>/dev/null | jq -r '.values.root_module.resources[]? | select(.type=="aws_vpc") | .values.id' | head -1)
          fi
          
          # Validar novamente
          if [[ ! "$VPC_ID" =~ ^vpc-[a-f0-9]{17}$ ]] && [[ ! "$VPC_ID" =~ ^vpc-[a-f0-9]{8}$ ]]; then
            echo "❌ ERRO: Não foi possível extrair VPC_ID válido"
            echo "VPC_ID capturado: '$VPC_ID'"
            exit 1
          fi
          
          echo "✅ VPC_ID encontrado: $VPC_ID"
          echo "VPC_ID=$VPC_ID" >> $GITHUB_OUTPUT
        working-directory: ./src

      # ========== LIMPEZA FORÇADA DE RECURSOS AWS ==========

      - name: 🔍 Diagnóstico - Listar recursos presos
        run: |
          VPC_ID="${{ steps.get_vpc.outputs.VPC_ID }}"
          echo "============================================"
          echo "📋 DIAGNÓSTICO DE RECURSOS NA VPC: $VPC_ID"
          echo "============================================"
          
          echo -e "\n=== Load Balancers ==="
          aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?VpcId=='$VPC_ID'].[LoadBalancerName,LoadBalancerArn,State.Code]" \
            --output table 2>/dev/null || echo "Nenhum LB encontrado"
          
          echo -e "\n=== NAT Gateways ==="
          aws ec2 describe-nat-gateways \
            --filter "Name=vpc-id,Values=$VPC_ID" \
            --query 'NatGateways[*].[NatGatewayId,State,SubnetId]' \
            --output table 2>/dev/null || echo "Nenhum NAT encontrado"
          
          echo -e "\n=== Elastic IPs ==="
          aws ec2 describe-addresses \
            --filters "Name=domain,Values=vpc" \
            --query 'Addresses[*].[PublicIp,AllocationId,AssociationId]' \
            --output table 2>/dev/null || echo "Nenhum EIP encontrado"
          
          echo -e "\n=== Network Interfaces ==="
          aws ec2 describe-network-interfaces \
            --filters "Name=vpc-id,Values=$VPC_ID" \
            --query 'NetworkInterfaces[*].[NetworkInterfaceId,Status,Description]' \
            --output table 2>/dev/null || echo "Nenhum ENI encontrado"
        continue-on-error: true

      - name: 🔥 1/5 - Deletar Load Balancers
        run: |
          VPC_ID="${{ steps.get_vpc.outputs.VPC_ID }}"
          echo "Deletando Load Balancers da VPC $VPC_ID..."
          
          LBS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?VpcId=='$VPC_ID'].LoadBalancerArn" \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$LBS" ] && [ "$LBS" != "None" ]; then
            for lb in $LBS; do
              echo "  ➜ Deletando LB: $lb"
              aws elbv2 delete-load-balancer --load-balancer-arn $lb 2>/dev/null || true
            done
            echo "✅ Load Balancers deletados. Aguardando 60s..."
            sleep 60
          else
            echo "✅ Nenhum Load Balancer encontrado"
          fi
        continue-on-error: true

      - name: 🔥 2/5 - Deletar NAT Gateways
        run: |
          VPC_ID="${{ steps.get_vpc.outputs.VPC_ID }}"
          echo "Deletando NAT Gateways da VPC $VPC_ID..."
          
          NATS=$(aws ec2 describe-nat-gateways \
            --filter "Name=vpc-id,Values=$VPC_ID" "Name=state,Values=available,pending" \
            --query 'NatGateways[*].NatGatewayId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$NATS" ] && [ "$NATS" != "None" ]; then
            for nat in $NATS; do
              echo "  ➜ Deletando NAT: $nat"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat 2>/dev/null || true
            done
            echo "✅ NAT Gateways deletados. Aguardando 120s para liberação completa..."
            sleep 120
          else
            echo "✅ Nenhum NAT Gateway encontrado"
          fi
        continue-on-error: true

      - name: 🔥 3/5 - Liberar Elastic IPs
        run: |
          echo "Liberando Elastic IPs..."
          
          EIPS=$(aws ec2 describe-addresses \
            --filters "Name=domain,Values=vpc" \
            --query 'Addresses[*].AllocationId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$EIPS" ] && [ "$EIPS" != "None" ]; then
            for eip in $EIPS; do
              echo "  ➜ Liberando EIP: $eip"
          
              # Tenta desassociar primeiro
              ASSOC_ID=$(aws ec2 describe-addresses \
                --allocation-ids $eip \
                --query 'Addresses[0].AssociationId' \
                --output text 2>/dev/null || echo "")
          
              if [ -n "$ASSOC_ID" ] && [ "$ASSOC_ID" != "None" ] && [ "$ASSOC_ID" != "null" ]; then
                aws ec2 disassociate-address --association-id $ASSOC_ID 2>/dev/null || true
                sleep 5
              fi
          
              # Depois libera
              aws ec2 release-address --allocation-id $eip 2>/dev/null || true
            done
            echo "✅ Elastic IPs liberados"
          else
            echo "✅ Nenhum Elastic IP encontrado"
          fi
        continue-on-error: true

      - name: 🔥 4/5 - Deletar Network Interfaces
        run: |
          VPC_ID="${{ steps.get_vpc.outputs.VPC_ID }}"
          echo "Deletando Network Interfaces da VPC $VPC_ID..."
          
          ENIS=$(aws ec2 describe-network-interfaces \
            --filters "Name=vpc-id,Values=$VPC_ID" \
            --query 'NetworkInterfaces[*].NetworkInterfaceId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$ENIS" ] && [ "$ENIS" != "None" ]; then
            for eni in $ENIS; do
              echo "  ➜ Processando ENI: $eni"
          
              # Tenta desanexar se estiver anexado
              ATTACH_ID=$(aws ec2 describe-network-interfaces \
                --network-interface-ids $eni \
                --query 'NetworkInterfaces[0].Attachment.AttachmentId' \
                --output text 2>/dev/null || echo "")
          
              if [ -n "$ATTACH_ID" ] && [ "$ATTACH_ID" != "None" ] && [ "$ATTACH_ID" != "null" ]; then
                echo "    ↳ Desanexando..."
                aws ec2 detach-network-interface \
                  --attachment-id $ATTACH_ID \
                  --force 2>/dev/null || true
                sleep 5
              fi
          
              # Deleta o ENI
              echo "    ↳ Deletando..."
              aws ec2 delete-network-interface \
                --network-interface-id $eni 2>/dev/null || true
            done
            echo "✅ Network Interfaces processados. Aguardando 30s..."
            sleep 30
          else
            echo "✅ Nenhum Network Interface encontrado"
          fi
        continue-on-error: true

      - name: 🔥 5/5 - Limpeza de Security Groups órfãos
        run: |
          VPC_ID="${{ steps.get_vpc.outputs.VPC_ID }}"
          echo "Limpando Security Groups órfãos da VPC $VPC_ID..."
          
          SGS=$(aws ec2 describe-security-groups \
            --filters "Name=vpc-id,Values=$VPC_ID" \
            --query 'SecurityGroups[?GroupName!=`default`].GroupId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$SGS" ] && [ "$SGS" != "None" ]; then
            for sg in $SGS; do
              echo "  ➜ Deletando SG: $sg"
              aws ec2 delete-security-group --group-id $sg 2>/dev/null || true
            done
          fi
          
          echo "✅ Security Groups processados"
        continue-on-error: true

      # ========== TERRAFORM DESTROY ==========

      - name: 🎯 Terraform Destroy - Tentativa 1
        run: terraform destroy -parallelism=1 --auto-approve
        working-directory: ./src
        continue-on-error: true

      - name: ⏳ Aguardar propagação AWS
        run: |
          echo "Aguardando 60s para propagação de mudanças na AWS..."
          sleep 60

      - name: 🎯 Terraform Destroy - Tentativa 2 (Final)
        run: terraform destroy -parallelism=1 --auto-approve
        working-directory: ./src

      - name: ✅ Destroy concluído com sucesso
        run: |
          echo "============================================"
          echo "✅ DESTROY CONCLUÍDO COM SUCESSO!"
          echo "============================================"